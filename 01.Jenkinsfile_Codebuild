pipeline {
  agent { label 'master' }

  parameters {
    booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description : 'BUILD_DOCKER_IMAGE')
    booleanParam(name : 'RUN_TEST', defaultValue : true, description : 'RUN_TEST')
    booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : true, description : 'PUSH_DOCKER_IMAGE')
    booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')

    //CI
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '612545637826', description : 'AWS_ACCOUNT_ID')
    string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'test', description : 'DOCKER_IMAGE_NAME')
    string(name : 'DOCKER_TAG', defaultValue : '1', description : 'DOCKER_TAG')
    //CD
    string(name : 'TARGET_SVR_USER', defaultValue : 'ubuntu', description : 'TARGET_SVR_USER')
    string(name : 'TARGET_SVR', defaultValue : '52.79.170.185', description : 'TARGET_SVR')


  }

  environment {
    REGION = "ap-northeast-2"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}:${params.DOCKER_TAG}"
    CONTAINER_NAME = "web-demo"

    CODEBUILD_NAME = "jenkins-aws-codebuild-dc"
  }

  stages {
    stage('============ Build Docker Image ============') {
        when { expression { return params.BUILD_DOCKER_IMAGE } }
        agent { label 'master' }
        steps {
            awsCodeBuild(
              credentialsType: 'keys',
              region: "${REGION}",
              projectName: "${CODEBUILD_NAME}",
              sourceControlType: 'jenkins',
              sseAlgorithm: 'AES256',
              buildSpecFile: "buildspec.yml"
            )
        }
    }

    stage('============ Run test code ============') {
        when { expression { return params.RUN_TEST } }
        steps {
            echo "Stage Test"
        }
    }
    // stage('============ Push Docker Image ============') {
    //     when { expression { return params.PUSH_DOCKER_IMAGE } }
    //     agent { label 'master' }
    //     steps {
    //         echo "Push Docker Image to ECR!"
    //         echo "${ECR_REPOSITORY}"
    //         sh'''
    //             aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
    //             docker push ${DOCKER_IMAGE}
    //         '''
    //     }
    // }
    // stage('Prompt for deploy') {
    //     agent { label 'master' }
    //     steps {
    //       // input 'Deploy this ??'
    //       script {
    //         env.APPROAL_NUM = input message: 'Please enter the approval number',
    //                          parameters: [string(defaultValue: '',
    //                                       description: '',
    //                                       name: 'APPROVAL_NUM')]
    //         }

    //         echo "${env.APPROAL_NUM}"
    //     }
    // }
    // stage('============ Deploy workload ============') {
    //     when { expression { return params.DEPLOY_WORKLOAD } }
    //     agent { label 'deploy' }
    //     steps {
    //         sshagent (credentials: ['aws-ec2-user-ssh']) {
    //             sh """#!/bin/bash
    //                 ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
    //                     ${params.TARGET_SVR_USER}@${params.TARGET_SVR} \
    //                     'aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}; \
    //                      docker rm -f ${CONTAINER_NAME};
    //                      docker run -d -p 80:80 --name ${CONTAINER_NAME} ${DOCKER_IMAGE}';
    //             """
    //         }
    //     }
    // }

    // stage('============ Deploy Workload ============') {
    //     when { expression { return params.DEPLOY_WORKLOAD } }
    //     steps {
    //         echo "Deploy Workload!"
    //     }
    // }
  }
  // post {
  //   cleanup {
  //       echo "Post cleanup"
  //   }
  // }
}



// peline {
//   agent any

  // parameters {
  //   booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description : 'BUILD_DOCKER_IMAGE')
  //   booleanParam(name : 'RUN_TEST', defaultValue : true, description : 'RUN_TEST')
  //   booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : true, description : 'PUSH_DOCKER_IMAGE')
  //   booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')

  //   string(name : 'AWS_ACCOUNT_ID', defaultValue : '612545637826', description : 'AWS_ACCOUNT_ID')
  //   string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'demo', description : 'DOCKER_IMAGE_NAME')
  //   string(name : 'DOCKER_TAG', defaultValue : '1', description : 'DOCKER_TAG')

  // }

  // environment {
  //   REGION = "ap-northeast-2"
  //   ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
  //   DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}:${params.DOCKER_TAG}"

  // }

//   stages {
//     stage('============ Build Docker Image ============') {
//         when {
//             expression { return params.BUILD_DOCKER_IMAGE }
//         }
//         steps {
//             dir("${env.WORKSPACE}"){
//               sh 'docker build -t ${DOCKER_IMAGE} .'
//             }
//         }
//         post {
//             always {
//                 echo "Docker Build Success!"
//             }
//         }
//     }
//     stage('============ Run test code ============') {
//         when { expression { return params.RUN_TEST } }
//         steps {
//           echo "Run test Code (Skip)"
//         }
//     }
//     // stage('============ Push Docker Image ============') {
//     //     when { expression { return params.PUSH_DOCKER_IMAGE } }
//     //     steps {
//     //         echo "Push Docker Image to ECR"
//     //         echo "${ECR_REPOSITORY}"
//     //         sh'''
//     //             aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
//     //             docker push ${DOCKER_IMAGE}
//     //         '''
//     //     }
//     // }
//     stage('============ Deploy Workload ============') {
//         when { expression { return params.DEPLOY_WORKLOAD } }
//         steps {
//             echo "Deploy Workload"
//         }
//     }
//   }
//   post {

//     // success {
//     //   slackSend(
//     //     channel: "general",
//     //     color: "good",
//     //     message: "${DOCKER_IMAGE} 배포 성공, Job:${env.JOB_NAME}, Open Job Detail : <${env.RUN_DISPLAY_URL}"
//     //   )
      
//     // }
//     // failure {
//     //   slackSend(
//     //     channel: "general",
//     //     color: "danger",
//     //     message: "${DOCKER_IMAGE} 배포 성공, Job:${env.JOB_NAME}, Open Job Detail : <${env.RUN_DISPLAY_URL}"
//     //   )
      
//     // }
//     cleanup {
//         echo "Post cleanup"
//         sh('docker image prune -f')
//         sh('docker container prune -f')

//     }
//   }
// }

